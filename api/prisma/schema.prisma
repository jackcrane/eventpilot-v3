generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  password    String
  name        String
  phoneNumber String?

  emailVerified Boolean @default(false)

  emailVerifications   EmailVerification[]
  logs                 Logs[]
  forgotPasswordTokens ForgotPasswordToken[]
  files                File[]

  emailPreferences EmailPreferences?

  stripe_customerId    String?
  stripe_setupIntentId String?

  goodPaymentStanding Boolean @default(false)

  accountType AccountType @default(MANAGER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suspended Boolean @default(false)

  events Event[]
  emails Email[]
}

enum AccountType {
  MANAGER
}

model EmailPreferences {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  login Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(cuid())

  deleted Boolean @default(false)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  inboundEmails  InboundEmail[]
  outboundEmails Email[]
  logs           Logs[]
  participants   CrmPerson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InboundEmail {
  id                String                   @id @default(cuid())
  conversationId    String?
  conversation      Conversation?            @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  from              InboundEmailParticipant? @relation("FromParticipant")
  originalRecipient String?

  eventId String?
  event   Event?  @relation(name: "Event_InboundEmails", fields: [eventId], references: [id], onDelete: Cascade)

  forwardedForEvent Event? @relation(name: "Event_ForwardConfirm")

  crmPersons CrmPerson[]

  to  InboundEmailParticipant[] @relation("ToParticipants")
  cc  InboundEmailParticipant[] @relation("CcParticipants")
  bcc InboundEmailParticipant[] @relation("BccParticipants")

  subject     String
  messageId   String /// Postmark MessageID
  replyTo     String?
  mailboxHash String?

  textBody          String?
  htmlBody          String?
  strippedTextReply String?

  tag String?

  headers     InboundEmailHeaders[]
  attachments InboundEmailAttachment[]
  logs        Logs[]

  read Boolean @default(false)

  receivedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model InboundEmailHeaders {
  id String @id @default(cuid())

  inboundEmailId String
  inboundEmail   InboundEmail @relation(fields: [inboundEmailId], references: [id], onDelete: Cascade)

  key   String
  value String
}

model InboundEmailAttachment {
  id String @id @default(cuid())

  inboundEmailId String
  inboundEmail   InboundEmail @relation(fields: [inboundEmailId], references: [id], onDelete: Cascade)

  file   File?   @relation("FileAttachment", fields: [fileId], references: [id], onDelete: Cascade)
  fileId String? @unique
}

model InboundEmailParticipant {
  id          String  @id @default(cuid())
  email       String
  name        String?
  mailboxHash String?

  fromEmailId String?       @unique
  fromEmail   InboundEmail? @relation("FromParticipant", fields: [fromEmailId], references: [id])

  inboundEmailToId String?
  inboundEmailTo   InboundEmail? @relation("ToParticipants", fields: [inboundEmailToId], references: [id], onDelete: Cascade)

  inboundEmailCcId String?
  inboundEmailCc   InboundEmail? @relation("CcParticipants", fields: [inboundEmailCcId], references: [id], onDelete: Cascade)

  inboundEmailBccId String?
  inboundEmailBcc   InboundEmail? @relation("BccParticipants", fields: [inboundEmailBccId], references: [id], onDelete: Cascade)
}

model Email {
  id             String        @id @default(cuid())
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageId      String
  from           String
  to             String
  subject        String
  htmlBody       String?
  textBody       String?

  isAutogeneratedResponse Boolean @default(false)
  opened                  Boolean @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  crmPersonEmailId String?
  crmPersonEmail   CrmPersonEmail? @relation(fields: [crmPersonEmailId], references: [id], onDelete: Cascade)

  crmPersonId String?
  crmPerson   CrmPerson? @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  responses EmailWebhooks[]

  logs Logs[]

  status EmailStatus @default(SENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  BOUNCED
}

model EmailVerification {
  id String @id @default(cuid())

  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  active Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailWebhooks {
  id        String @id @default(cuid())
  messageId String

  emailId String
  email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)

  data String
  type EmailWebhookType

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotPasswordToken {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  active Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EmailWebhookType {
  DELIVERY
  OPEN
  BOUNCE
  SPAM_COMPLAINT
  LINK_CLICK
}

model Geolocation {
  id         String   @id @default(cuid())
  ip         String   @unique
  city       String?
  regionName String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  logs       Logs[]
}

model File {
  id String @id @default(cuid())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  key          String
  originalname String
  mimetype     String
  contentType  String
  size         Int
  location     String
  blurhash     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event        Event? @relation(name: "EventLogo")
  event_banner Event? @relation(name: "EventBanner")

  upsellItemId String?
  upsellItem UpsellItem? @relation(name: "UpsellItemImage", fields: [upsellItemId], references: [id])

  inboundEmailAttachment   InboundEmailAttachment? @relation("FileAttachment")
  inboundEmailAttachmentId String?                 @unique

  logs         Logs[]
}

model Event {
  id          String     @id @default(cuid())
  name        String
  description String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations   Location[]
  jobs        Job[]
  shifts      Shift[]

  defaultTz String?

  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logoFileId String? @unique
  logo       File?   @relation(name: "EventLogo", fields: [logoFileId], references: [id], onDelete: Cascade)

  bannerFileId String? @unique
  banner       File?   @relation(name: "EventBanner", fields: [bannerFileId], references: [id], onDelete: Cascade)

  contactEmail         String?
  externalContactEmail String?

  willForwardEmail                Boolean       @default(true)
  forwardEmailConfirmed           Boolean       @default(false)
  forwardEmailConfirmationEmailId String?       @unique
  forwardEmailConfirmationEmail   InboundEmail? @relation(name: "Event_ForwardConfirm", fields: [forwardEmailConfirmationEmailId], references: [id])
  forwardEmailConfirmationLink    String?
  useHostedEmail                  Boolean       @default(false)

  primaryAddress String?

  contactPhone String?
  website      String?

  organization String?

  // Socials
  facebook  String?
  instagram String?
  twitter   String?
  youtube   String?
  linkedin  String?
  tiktok    String?
  snapchat  String?
  reddit    String?
  threads   String?

  formFields          FormField[]
  formResponses       FormResponse[]
  logs                Logs[]
  crmPersons          CrmPerson[]
  crmFields           CrmField[]
  crmPersonImports    CrmPersonsImport[]
  inboundEmails       InboundEmail[]       @relation(name: "Event_InboundEmails")
  conversations       Conversation[]
  registrationTiers   RegistrationTier[]
  registrationPeriods RegistrationPeriod[]
  registrationUpsells UpsellItem[]
  registrationFields  RegistrationField[]
  registrations       Registration[]
  teams               Team[]
  registrationPages   RegistrationPage[]

  stripeConnectedAccountId String?
}

model CrmPersonsImport {
  id String @id @default(cuid())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  crmPersons CrmPerson[]
  total      Int

  logs Logs[]

  finished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormField {
  id           String  @id @default(cuid())
  type         String
  label        String
  placeholder  String?
  description  String?
  required     Boolean @default(false)
  defaultValue Boolean @default(false)
  prompt       String?
  order        Int

  eventpilotFieldType String?
  autocompleteType    String?

  options        FormFieldOption[]
  fieldResponses FieldResponse[]

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  logs Logs[]
}

model FormFieldOption {
  id      String    @id @default(cuid())
  fieldId String
  field   FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  label   String
  order   Int
  deleted Boolean   @default(false)

  @@index([fieldId])
}

model FormResponse {
  id             String          @id @default(cuid())
  fieldResponses FieldResponse[]
  pii            PII?
  deleted        Boolean         @default(false)

  crmPersonLink CrmPersonLink?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  logs   Logs[]
  shifts FormResponseShift[]
}

model PII {
  id String @id @default(cuid())

  formResponseId String?       @unique
  formResponse   FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  userAgent    String?
  ipAddress    String?
  fingerprint  String?
  location     Json?
  tz           String?
  browser      Json?
  device       Json?
  os           Json?
  screenWidth  Int?
  screenHeight Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldResponse {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id])
  value      String?

  @@index([responseId])
  @@index([fieldId])
}

model Location {
  id String @id @default(cuid())

  name        String
  description String
  eventId     String
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  address String?
  city    String?
  state   String?

  startTime   DateTime
  endTime     DateTime
  startTimeTz String
  endTimeTz   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  jobs   Job[]
  shifts Shift[]
  logs   Logs[]
}

model Job {
  id String @id @default(cuid())

  name         String
  description  String
  restrictions JobRestrictions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  capacity Int

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  shifts Shift[]
  logs   Logs[]
}

enum JobRestrictions {
  OVER_18
  OVER_21
  SPECIAL_CERT_REQUIRED
  PHYSICAL_ABILITY
  OTHER
}

model FormResponseShift {
  id String @id @default(cuid())

  formResponseId String
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  shiftId String
  shift   Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique by shiftId and formResponseId
  @@unique([shiftId, formResponseId])
}

model Shift {
  id String @id @default(cuid())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  startTime   DateTime
  endTime     DateTime
  startTimeTz String
  endTimeTz   String

  capacity Int
  open     Boolean @default(true)
  active   Boolean @default(true)

  volunteers FormResponseShift[]

  logs    Logs[]
  deleted Boolean @default(false)
}

model CrmPerson {
  id     String           @id @default(cuid())
  name   String
  source String           @default("MANUAL")
  emails CrmPersonEmail[]
  phones CrmPersonPhone[]
  links  CrmPersonLink[]

  logs          Logs[]
  sentEmails    Email[]
  inboundEmails InboundEmail[]
  conversations Conversation[]
  deleted       Boolean        @default(false)

  fieldValues CrmPersonField[]

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  importId String?
  import   CrmPersonsImport? @relation(fields: [importId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CrmPersonLink {
  id String @id @default(cuid())

  crmPersonId String
  crmPerson   CrmPerson @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  formResponseId String?       @unique
  formResponse   FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CrmPersonEmail {
  id String @id @default(cuid())

  crmPersonId String
  crmPerson   CrmPerson @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  email String
  label String?
  notes String?

  emails Email[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model CrmPersonPhone {
  id String @id @default(cuid())

  crmPersonId String
  crmPerson   CrmPerson @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  phone String
  label String?
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model CrmField {
  id String @id @default(cuid())

  label       String
  description String?
  type        CrmFieldType

  persons CrmPersonField[]

  showInGeneralTable Boolean @default(true)
  generalTableOrder  Int     @default(0)

  showInPersonTable Boolean @default(true)
  personTableOrder  Int     @default(0)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  logs      Logs[]
}

model CrmPersonField {
  id String @id @default(cuid())

  crmFieldId String
  crmField   CrmField @relation(fields: [crmFieldId], references: [id], onDelete: Cascade)

  crmPersonId String
  crmPerson   CrmPerson @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  value String

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique by crmPersonId and crmFieldId
  @@unique([crmPersonId, crmFieldId])
}

enum CrmFieldType {
  TEXT
  EMAIL
  PHONE
  BOOLEAN
  DATE
  NUMBER
  ADDRESS
}

model RegistrationTier {
  id          String  @id @default(cuid())
  eventId     String
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name        String
  description String?
  capacity    Int?
  order       Int     @default(0)

  pricingTiers  RegistrationPeriodPricing[]
  registrations Registration[]

  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationPeriodPricing {
  /// Registration Period Pricing is a join table between RegistrationPeriod and RegistrationTier. It includes the price and availability of a registration period.
  id String @id @default(cuid())

  registrationPeriodId String
  registrationPeriod   RegistrationPeriod @relation(fields: [registrationPeriodId], references: [id], onDelete: Cascade)

  registrationTierId String
  registrationTier   RegistrationTier @relation(fields: [registrationTierId], references: [id], onDelete: Cascade)

  price          Float
  available      Boolean @default(true)
  stripe_productId String?
  stripe_priceId String?

  registrations Registration[]

  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      Logs[]
}

model RegistrationPeriod {
  id                String                      @id @default(cuid())
  registrationTiers RegistrationPeriodPricing[]

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  registrations Registration[]

  name        String // e.g. "Early Bird"
  startTime   DateTime
  startTimeTz String
  endTime     DateTime
  endTimeTz   String

  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("RegistrationPricing")
}

model Team {
  id            String         @id @default(cuid())
  eventId       String
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name          String
  code          String         @unique
  maxSize       Int?
  registrations Registration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpsellItem {
  id          String  @id @default(cuid())
  eventId     String
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Float
  inventory   Int?
  order       Int     @default(0)

  stripe_productId String?
  stripe_priceId String?

  registrations RegistrationUpsell[]
  images        File[]               @relation(name: "UpsellItemImage")
  deleted       Boolean              @default(false)
  logs          Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Registration {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  registrationTierId String?
  registrationTier   RegistrationTier? @relation(fields: [registrationTierId], references: [id])

  pricingTierId String?
  pricingTier   RegistrationPeriod? @relation(fields: [pricingTierId], references: [id])

  registrationPeriodPricingId String?
  registrationPeriodPricing   RegistrationPeriodPricing? @relation(fields: [registrationPeriodPricingId], references: [id])

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  upsells        RegistrationUpsell[]
  fieldResponses RegistrationFieldResponse[]

  finalized Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      Logs[]
  deleted   Boolean @default(false)
}

model RegistrationUpsell {
  registrationId String
  upsellItemId   String
  quantity       Int    @default(1)

  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  upsellItem   UpsellItem   @relation(fields: [upsellItemId], references: [id], onDelete: Cascade)

  @@id([registrationId, upsellItemId])
}

model RegistrationPage {
  id String @id @default(cuid())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  name String

  order Int @default(0)

  fields RegistrationField[]

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationField {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  label       String?
  type        RegistrationFieldType
  fieldType   String?
  required    Boolean                   @default(false)
  options     RegistrationFieldOption[]
  placeholder String?
  description String?
  prompt      String?
  rows        Int?
  markdown    String?

  order     Int                         @default(0)
  responses RegistrationFieldResponse[]
  pageId    String
  page      RegistrationPage            @relation(fields: [pageId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationFieldOption {
  id      String            @id @default(cuid())
  fieldId String
  field   RegistrationField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  label   String
  value   String
  order   Int               @default(0)

  deleted   Boolean                     @default(false)
  responses RegistrationFieldResponse[]
}

model RegistrationFieldResponse {
  id             String  @id @default(cuid())
  registrationId String
  fieldId        String
  optionId       String?

  registration Registration             @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  field        RegistrationField        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  option       RegistrationFieldOption? @relation(fields: [optionId], references: [id])
  value        String?

  @@unique([registrationId, fieldId])
}

enum RegistrationFieldType {
  TEXT
  EMAIL
  TEXTAREA
  RICHTEXT
  CHECKBOX
  DROPDOWN
  REGISTRATIONTIER
  UPSELLS
}

model Logs {
  id String @id @default(cuid())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailPreferencesId String?
  emailPreferences   EmailPreferences? @relation(fields: [emailPreferencesId], references: [id], onDelete: Cascade)

  emailId String?
  email   Email?  @relation(fields: [emailId], references: [id], onDelete: Cascade)

  emailVerificationId String?
  emailVerification   EmailVerification? @relation(fields: [emailVerificationId], references: [id], onDelete: Cascade)

  emailWebookId String?
  emailWebook   EmailWebhooks? @relation(fields: [emailWebookId], references: [id], onDelete: Cascade)

  forgotPasswordTokenId String?
  forgotPasswordToken   ForgotPasswordToken? @relation(fields: [forgotPasswordTokenId], references: [id], onDelete: Cascade)

  geolocationId String?
  geolocation   Geolocation? @relation(fields: [geolocationId], references: [id], onDelete: Cascade)

  fileId String?
  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  formFieldId String?
  formField   FormField? @relation(fields: [formFieldId], references: [id], onDelete: Cascade)

  formResponseId String?
  formResponse   FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  shiftId String?
  shift   Shift?  @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  crmPersonId String?
  crmPerson   CrmPerson? @relation(fields: [crmPersonId], references: [id], onDelete: Cascade)

  crmFieldId String?
  crmField   CrmField? @relation(fields: [crmFieldId], references: [id], onDelete: Cascade)

  importId String?
  import   CrmPersonsImport? @relation(fields: [importId], references: [id], onDelete: Cascade)

  inboundEmailId String?
  inboundEmail   InboundEmail? @relation(fields: [inboundEmailId], references: [id], onDelete: Cascade)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  upsellItemId String?
  upsellItem   UpsellItem? @relation(fields: [upsellItemId], references: [id], onDelete: Cascade)

  registrationId String?
  registration   Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  registrationPeriodPricingId String?
  registrationPeriodPricing   RegistrationPeriodPricing? @relation(fields: [registrationPeriodPricingId], references: [id], onDelete: Cascade)

  type LogType

  ip   String?
  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// LogTypes are in form NOUN_VERB
enum LogType {
  USER_CREATED
  USER_LOGIN
  USER_PASSWORD_RESET_REQUEST
  USER_PASSWORD_RESET
  USER_EMAIL_VERIFICATION_RESENT
  USER_ACCOUNT_UPDATED
  USER_EMAIL_PREFERENCES_UPDATED
  EMAIL_SENT
  EMAIL_VERIFIED
  EMAIL_WEBHOOK_RECEIVED
  EMAIL_WEBHOOK_BOUNCE
  EMAIL_WEBHOOK_DELIVERY
  EMAIL_WEBHOOK_OPEN
  EMAIL_WEBHOOK_SPAM_COMPLAINT
  EMAIL_WEBHOOK_LINK_CLICK
  EMAIL_MARKED_READ
  EMAIL_MARKED_UNREAD
  FILE_UPLOADED
  EVENT_CREATED
  EVENT_MODIFIED
  EVENT_DELETED
  FORM_FIELD_CREATED
  FORM_FIELD_MODIFIED
  FORM_FIELD_DELETED
  FORM_RESPONSE_CREATED
  FORM_RESPONSE_MODIFIED
  FORM_RESPONSE_DELETED
  LOCATION_CREATED
  LOCATION_MODIFIED
  LOCATION_DELETED
  JOB_CREATED
  JOB_MODIFIED
  JOB_DELETED
  SHIFT_CREATED
  SHIFT_MODIFIED
  SHIFT_DELETED
  STRIPE_CUSTOMER_CREATED
  STRIPE_CUSTOMER_UPDATED
  STRIPE_SETUP_INTENT_CREATED
  STRIPE_SETUP_INTENT_SUCCEEDED
  STRIPE_PAYMENT_METHOD_ATTACHED
  STRIPE_SUBSCRIPTION_CREATED
  STRIPE_CONNECTED_ACCOUNT_CREATED
  STRIPE_CONNECTED_ACCOUNT_UPDATED
  STRIPE_CONNECTED_ACCOUNT_DELETED
  STRIPE_PRICE_CREATED
  STRIPE_PRICE_UPDATED
  STRIPE_PRICE_DELETED
  CRM_FIELD_CREATED
  CRM_FIELD_MODIFIED
  CRM_FIELD_DELETED
  CRM_PERSON_CREATED
  CRM_PERSON_MODIFIED
  CRM_PERSON_DELETED
  CRM_PERSONS_IMPORT_STARTED
  CRM_PERSONS_IMPORT_COMPLETED
  CONVERSATION_DELETED
  UPSELL_ITEM_CREATED
  UPSELL_ITEM_MODIFIED
  UPSELL_ITEM_DELETED
  UPSELL_ITEM_STRIPE_PRICE_CREATED
  UPSELL_ITEM_STRIPE_PRICE_MODIFIED
  UPSELL_ITEM_STRIPE_PRICE_DELETED
  UPSELL_ITEM_PRICE_CHANGED
  UPSELL_SOLD
  REGISTRATION_PERIOD_PRICING_SOLD
  REGISTRATION_CREATED
  REGISTRATION_UPDATED
  REGISTRATION_DELETED
}
