// src/pages/ConversationPage/ConversationTimeline.js
import React from "react";
import { Timeline, Typography, Avatar } from "tabler-react-2";
import moment from "moment";
import {
  extractInitialsFromName,
  contactIncludesEPEmail,
  Attachment,
} from "../../components/emailPreview/emailPreview";
import { Row } from "../../util/Flex";
import { useEvent } from "../../hooks/useEvent";

const EventIcon = ({ slug, initials }) => {
  const { event } = useEvent({ eventId: slug });
  return event ? (
    <Avatar src={event.logo?.location} alt={event.name} />
  ) : (
    <Avatar initials={initials} />
  );
};

const getSlugFromEmail = (input) => {
  if (!input) return null;
  const match = input.match(/<([^>]+)>/);
  const email = match ? match[1] : input;
  const localPart = email.split("@")[0];
  return localPart.split("+")[2];
};

const emailToTimelineItem = (email) => {
  if (email.isAutogeneratedResponse) return null;

  const fromAddress =
    email.type === "OUTBOUND"
      ? email.from
      : `${email.from.name} <${email.from.email}>`;

  const slug = getSlugFromEmail(
    email.type === "OUTBOUND" ? fromAddress : email.from.email
  );

  const initials =
    email.type === "OUTBOUND"
      ? extractInitialsFromName(email.from)
      : extractInitialsFromName(email.from.name);

  const fromToDisplay = contactIncludesEPEmail(fromAddress)
    ? fromAddress.split(" <response+")[0]
    : fromAddress;

  return {
    time: moment(email.createdAt).format("M/DD/YY h:mm a"),
    title: fromToDisplay,
    description: (
      <>
        <div
          dangerouslySetInnerHTML={{ __html: email.htmlBody || email.textBody }}
        />
        {email.attachments?.length > 0 && (
          <>
            <Typography.Text className="mb-0">
              <span className="text-muted">Attachments:</span>{" "}
            </Typography.Text>
            <Row gap={1} align="flex-start">
              {email.attachments.map((a) => (
                <Attachment key={a.id} attachment={a} />
              ))}
            </Row>
          </>
        )}
      </>
    ),
    icon: <EventIcon slug={slug} initials={initials} />,
  };
};

export const ConversationTimeline = ({ emails }) => (
  <Timeline events={emails.map(emailToTimelineItem).filter(Boolean)} />
);
