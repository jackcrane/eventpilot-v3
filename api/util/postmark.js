import postmark from "postmark";
import dotenv from "dotenv";
dotenv.config();
import { prisma } from "#prisma";
import { z } from "zod";

let rawEmailClient = new postmark.ServerClient(process.env.POSTMARK_API_TOKEN);

/**
 * Sends an email using postmark
 * @param {*} options
 * @param {*} options.From
 * @param {*} options.To
 * @param {*} options.Subject
 * @param {*} options.TextBody
 * @param {*} options.HtmlBody
 * @param {*} options.userId
 * @param {*} options.crmPersonId
 * @returns
 */
const sendEmail = async (
  options,
  conversationId = undefined,
  isAutogeneratedResponse = false
) => {
  const schema = z.object({
    From: z.string({
      required_error: "From is a required field",
    }),
    To: z
      .string({
        required_error: "To is a required field",
      })
      .email(),
    Subject: z.string({
      required_error: "Subject is a required field",
    }),
    HtmlBody: z
      .string({
        required_error: "HtmlBody is a required field",
      })
      .optional(),
    TextBody: z.string().default("You have a new email from EventPilot!"),
    userId: z.string().optional(),
    crmPersonId: z.string().optional(),
    Headers: z
      .array(z.object({ Name: z.string(), Value: z.string() }))
      .optional(),
    ReplyTo: z.string().optional(),
  });
  const result = schema.safeParse(options);

  const IS_TEST = result.data.To.includes("eventpilot-test");

  if (!result.success) {
    console.log(options);
    console.error(result.error.issues);
    throw new Error(result.error.issues);
  }

  try {
    if (!options.HtmlBody) {
      options.HtmlBody = options.TextBody.replaceAll("\n", "<br />");
    }
    if (!options.TextBody) {
      options.TextBody = "You have a new email from EventPilot!";
    }

    const res = IS_TEST
      ? {
          MessageID: "test",
        }
      : await rawEmailClient.sendEmail(options);

    const emailRecord = await prisma.email.create({
      data: {
        messageId: res.MessageID,
        from: options.From,
        to: options.To,
        subject: options.Subject,
        userId: options.userId,
        crmPersonId: options.crmPersonId,
        htmlBody: options.HtmlBody,
        textBody: options.TextBody,
        conversationId,
        isAutogeneratedResponse,
      },
    });

    await prisma.logs.create({
      data: {
        type: "EMAIL_SENT",
        userId: options.userId,
        emailId: emailRecord.id,
        crmPersonId: options.crmPersonId,
      },
    });

    return { postmarkResponse: res, emailRecord };
  } catch (e) {
    console.error(e);
    console.log(options);
    throw new Error("Error sending email");
  }
};

export { rawEmailClient, sendEmail };

// eslint-disable-next-line
const test = async () => {
  const res = await sendEmail({
    From: "EventPilot Support <EventPilot@geteventpilot.com>",
    To: "jackgeteventpilot.com",
    Subject: "Test",
    TextBody: "Test",
    HtmlBody: "<h1>Test</h1>",
  });

  console.log(res);
};

// test();
