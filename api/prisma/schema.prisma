generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  name String
  phoneNumber String?

  emailVerified Boolean @default(false)

  emailVerifications EmailVerification[]
  logs Logs[]
  forgotPasswordTokens ForgotPasswordToken[]
  files File[]

  emailPreferences EmailPreferences?

  accountType AccountType @default(MANAGER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suspended Boolean @default(false)

  events Event[]
  campaigns Campaign[]
}

enum AccountType {
  MANAGER
}

model EmailPreferences {
  id String @id @default(cuid())

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  login Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id String @id @default(cuid())
  messageId String
  from String
  to String
  subject String

  userId String?

  responses EmailWebhooks[]

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailVerification {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  active Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailWebhooks {
  id String @id @default(cuid())
  messageId String

  emailId String
  email Email @relation(fields: [emailId], references: [id], onDelete: Cascade)

  data String
  type EmailWebhookType

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotPasswordToken {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  active Boolean @default(true)

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EmailWebhookType {
  DELIVERY
  OPEN
  BOUNCE
  SPAM_COMPLAINT
  LINK_CLICK
}

model Geolocation {
  id String @id @default(cuid())
  ip String @unique
  city String
  regionName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs Logs[]
}

model File {
  id String @id @default(cuid())

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  key String
  originalname String
  mimetype String
  contentType String
  size Int
  location String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event        Event?   @relation(name: "EventLogo")
  logs Logs[]
}

model Event {
  id String @id @default(cuid())
  name String
  description String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations Location[]
  jobs Job[]
  shifts Shift[]

  defaultTz String?

  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logoFileId    String?   @unique
  logo          File?     @relation(name: "EventLogo", fields: [logoFileId], references: [id], onDelete: Cascade)
  campaigns     Campaign[]
  logs Logs[]
}

model Campaign {
  id String @id @default(cuid())
  name String
  description String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formFields FormField[]
  formResponses FormResponse[]
  logs Logs[]
}

model FormField {
  id            String               @id @default(cuid())
  campaignId    String
  campaign      Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  type          String
  label         String
  placeholder   String?
  description   String?
  required      Boolean              @default(false)
  defaultValue  Boolean              @default(false)
  prompt        String?
  order         Int

  options       FormFieldOption[]
  fieldResponses FieldResponse[]

  deleted       Boolean              @default(false)

  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  logs Logs[]
}

model FormFieldOption {
  id        String     @id @default(cuid())
  fieldId   String
  field     FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  label     String
  order     Int
  deleted      Boolean   @default(false)

  @@index([fieldId])
}

model FormResponse {
  id             String           @id @default(cuid())
  campaignId     String
  campaign       Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  fieldResponses FieldResponse[]
  pii            PII?
  deleted Boolean @default(false)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  logs Logs[]
}

model PII {
  id String @id @default(cuid())

  formResponseId String? @unique
  formResponse   FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  userAgent String?
  ipAddress String?
  fingerprint String?
  location Json?
  tz String?
  browser Json?
  device Json?
  os Json?
  screenWidth Int?
  screenHeight Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldResponse {
  id          String        @id @default(cuid())
  responseId  String
  response    FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField     @relation(fields: [fieldId], references: [id])
  value       String?

  @@index([responseId])
  @@index([fieldId])
}

model Location {
  id String @id @default(cuid())

  name String
  description String
  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  address String?
  city String?
  state String?

  startTime DateTime
  endTime DateTime
  startTimeTz String
  endTimeTz String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  jobs Job[]
  shifts Shift[]
  logs Logs[]
}

model Job {
  id String @id @default(cuid())

  name String
  description String
  restrictions JobRestrictions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  capacity Int

  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  locationId String
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  shifts Shift[]
  logs Logs[]
}

enum JobRestrictions {
  OVER_18
  OVER_21
  SPECIAL_CERT_REQUIRED
  PHYSICAL_ABILITY
  OTHER
}

model Shift {
  id String @id @default(cuid())

  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locationId String
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  jobId String
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  startTime DateTime
  endTime DateTime
  startTimeTz String
  endTimeTz String

  capacity Int
  open Boolean @default(true)
  active Boolean @default(true)

  logs Logs[]
}


model Logs {
  id String @id @default(cuid())

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailPreferencesId String?
  emailPreferences EmailPreferences? @relation(fields: [emailPreferencesId], references: [id], onDelete: Cascade)

  emailId String?
  email Email? @relation(fields: [emailId], references: [id], onDelete: Cascade)

  emailVerificationId String?
  emailVerification EmailVerification? @relation(fields: [emailVerificationId], references: [id], onDelete: Cascade)

  emailWebookId String?
  emailWebook EmailWebhooks? @relation(fields: [emailWebookId], references: [id], onDelete: Cascade)

  forgotPasswordTokenId String?
  forgotPasswordToken ForgotPasswordToken? @relation(fields: [forgotPasswordTokenId], references: [id], onDelete: Cascade)

  geolocationId String?
  geolocation Geolocation? @relation(fields: [geolocationId], references: [id], onDelete: Cascade)

  fileId String?
  file File? @relation(fields: [fileId], references: [id], onDelete: Cascade)

  eventId String?
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  campaignId String?
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  formFieldId String?
  formField FormField? @relation(fields: [formFieldId], references: [id], onDelete: Cascade)

  formResponseId String?
  formResponse FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

  locationId String?
  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  jobId String?
  job Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  shiftId String?
  shift Shift? @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  type LogType

  ip String?
  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// LogTypes are in form NOUN_VERB
enum LogType {
  USER_CREATED
  USER_LOGIN
  USER_PASSWORD_RESET_REQUEST
  USER_PASSWORD_RESET
  USER_EMAIL_VERIFICATION_RESENT
  USER_ACCOUNT_UPDATED
  USER_EMAIL_PREFERENCES_UPDATED
  EMAIL_SENT
  EMAIL_VERIFIED
  EMAIL_WEBHOOK_RECEIVED
  FILE_UPLOADED
  EVENT_CREATED
  EVENT_MODIFIED
  EVENT_DELETED
  CAMPAIGN_CREATED
  CAMPAIGN_MODIFIED
  CAMPAIGN_DELETED
  FORM_FIELD_CREATED
  FORM_FIELD_MODIFIED
  FORM_FIELD_DELETED
  FORM_RESPONSE_CREATED
  FORM_RESPONSE_MODIFIED
  FORM_RESPONSE_DELETED
  LOCATION_CREATED
  LOCATION_MODIFIED
  LOCATION_DELETED
  JOB_CREATED
  JOB_MODIFIED
  JOB_DELETED
  SHIFT_CREATED
  SHIFT_MODIFIED
  SHIFT_DELETED
}